/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lht_hp: long_hold_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "LONG HOLD TAP HOLD PREFERRED";
            #binding-cells = <2>;
            tapping_term_ms = <1000>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        left_arrow_morph: left_arrow_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_ARROW_MORPH";
            bindings = <&kp W>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_RALT|MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RGUI)>;
        };

        down_arrow_morph: down_arrow_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_ARROW_MORPH";
            bindings = <&kp U>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_RALT|MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RGUI)>;
        };

        up_arrow_morph: up_arrow_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_ARROW_MORPH";
            bindings = <&kp E>, <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_RALT|MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RGUI)>;
        };

        right_arrow_morph: right_arrow_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_ARROW_MORPH";
            bindings = <&kp I>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_RALT|MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RGUI)>;
        };

        backspace_mod_morph: backspace_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_MOD_MORPH";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB            &kp Q  &kp C  &kp H     &kp M  &kp Z        &kp K              &kp Y              &kp O            &kp J               &kp SQT   &backspace_mod_morph
&lht_hp LCTRL ESC  &kp R  &kp S  &kp N     &kp T  &kp G        &left_arrow_morph  &down_arrow_morph  &up_arrow_morph  &right_arrow_morph  &kp A     &kp SEMI
&kp LSHIFT         &kp X  &kp B  &kp L     &kp D  &kp P        &kp V              &kp F              &kp COMMA        &kp DOT             &kp FSLH  &kp BACKSLASH
                                 &kp LGUI  &mo 2  &kp ENTER    &kp SPACE          &mo 1              &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp TILDE  &kp GRAVE          &trans           &trans                 &trans    &trans    &trans    &trans  &trans     &trans  &kp DELETE
&trans  &trans     &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans     &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &trans    &trans    &trans    &trans  &trans     &trans  &trans
                                      &trans           &trans                 &trans    &trans    &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp HASH   &kp DLLR         &kp PRCNT  &kp CARET       &kp AMPERSAND    &kp LA(NUMBER_3)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &kp DELETE
&trans  &kp EQUAL  &kp EXCLAMATION  &kp MINUS  &kp UNDERSCORE  &kp HASH         &kp ASTERISK      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0  &trans
&trans  &kp LG(Z)  &kp LG(X)        &kp LG(C)  &kp LG(V)       &kp AT_SIGN      &kp PLUS          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans        &trans
                                    &trans     &trans          &trans           &trans            &trans        &trans
            >;
        };

        extra_layer {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans        &trans            &trans                &trans                    &trans                &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_REWIND  &kp C_PLAY_PAUSE  &kp C_FAST_FORWARD    &kp C_MUTE                &kp C_VOLUME_DOWN     &kp C_VOLUME_UP
&trans      &trans        &trans        &trans        &trans        &trans          &trans        &kp C_BRI_DEC     &kp C_BRIGHTNESS_INC  &kp LG(LS(LC(NUMBER_4)))  &kp LG(LS(NUMBER_5))  &trans
                                        &trans        &trans        &trans          &trans        &trans            &trans
            >;
        };
    };
};
